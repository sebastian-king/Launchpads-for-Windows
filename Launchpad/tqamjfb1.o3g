using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using Midi;
using WindowsInput; // InputSimulator
using NAudio;
using ExtensionMethods; // Adds type to identify Launchpads

namespace Launchpad_Mk2
{
    class Program
    {
        public static List<InputDevice> inputDevice = new List<InputDevice>();
        public static List<OutputDevice> outputDevice = new List<OutputDevice>();
        public static bool[] on = new bool[121];
        private static bool exit = true;

        public static bool muted;

        public static double[] volumesLeft  = new double[4];
        public static double[] volumesRight = new double[4];

        public static int[] audio_colours = new int[8]{48,49,50,51,51,35,19,3};

        static void Main(string[] args)
        {
            Console.WriteLine("Launching Launchpad program ...");

            for (int i = 0; i < InputDevice.InstalledDevices.Count; i++)
            {
                if (InputDevice.InstalledDevices[i].type() != Types.LAUNCHPAD_TYPE.UNKNOWN_DEVICE_TYPE) // Launchpad*
                {
                    for (int n = 0; n < OutputDevice.InstalledDevices.Count; n++)
                    {
                        if (OutputDevice.InstalledDevices[n].Name == InputDevice.InstalledDevices[i].Name)
                        {
                            inputDevice.Add(InputDevice.InstalledDevices[i]);
                            outputDevice.Add(OutputDevice.InstalledDevices[n]);
                            Console.WriteLine("Using input/output device: \"" + inputDevice[inputDevice.Count - 1].Name + "\"");
                        }
                    }
                }
            }


            // connect to Launchpads

            for (int i = 0; i < inputDevice.Count; i++)
            {
                inputDevice[i].Open();
                inputDevice[i].ControlChange += new InputDevice.ControlChangeHandler(ControlChange);
                inputDevice[i].NoteOn += new InputDevice.NoteOnHandler(NoteOn);
                inputDevice[i].NoteOff += new InputDevice.NoteOffHandler(NoteOff);
                inputDevice[i].SysEx += new InputDevice.SysExHandler(SysEx);
                inputDevice[i].StartReceiving(null, true);  // Note events will be received in another thread, null means start clock at 0

                Console.WriteLine("Initiaiised device #" + i + ", device is type: " + inputDevice[i].type());

                outputDevice[i].Open();

                if (inputDevice[i].type() == Types.LAUNCHPAD_TYPE.S) {
                    outputDevice[i].SendControlChange(Channel.Channel1, 0, 0); // clear S
                }

                if (inputDevice[i].type() == Types.LAUNCHPAD_TYPE.MK2)
                {
                    outputDevice[i].SendSysEx(new Byte[] { 0xF0, 0x00, 0x20, 0x29, 0x02, 0x18, 0x0E, 0x0, 0xF7 }); // clear Mk2
                }
                
                outputDevice[i].SendSysEx(new Byte[] {0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7}); // device info for BOTH S & Mk2
                
                if (inputDevice[i].type() == Types.LAUNCHPAD_TYPE.S)
                {
                    //outputDevice[i].SendSysEx(textS("\x01Welcome\x06!!!", 15, false));
                }
                else if (inputDevice[i].type() == Types.LAUNCHPAD_TYPE.MK2)
                {
                    //outputDevice[i].SendSysEx(textMk2("\x01Welcome\x06!!!", 72, false));
                }
                exit = false; // so long as at least one device is initalised, the exit loop will run
            }
            
            NAudio.CoreAudioApi.MMDeviceEnumerator MMDE = new NAudio.CoreAudioApi.MMDeviceEnumerator();
            NAudio.CoreAudioApi.MMDevice device = MMDE.GetDefaultAudioEndpoint(NAudio.CoreAudioApi.DataFlow.Render, NAudio.CoreAudioApi.Role.Console);
            muted = device.AudioEndpointVolume.Mute;

            float[] volLevels = new float[device.AudioMeterInformation.PeakValues.Count]; // this is totally unnecessary to be honest
            for (int i = 0; i < volLevels.Length; i++)
            {
                volLevels[i] = device.AudioMeterInformation.PeakValues[i];
            } // end unncessary section

            AudioEndpointVolume_OnVolumeNotification(new NAudio.CoreAudioApi.AudioVolumeNotificationData(new Guid(), device.AudioEndpointVolume.Mute, device.AudioEndpointVolume.MasterVolumeLevel, volLevels));
            device.AudioEndpointVolume.OnVolumeNotification += AudioEndpointVolume_OnVolumeNotification;

            while (exit != true)
            {
                // keep on running
                //for (int i = 0; i < inputDevice.Count; i++)
                //{
                    //Console.WriteLine(inputDevice[i].Name + " isOpen => " + inputDevice[i].IsOpen + ", isReceiving => " + inputDevice[i].IsReceiving);
                    //Console.WriteLine(outputDevice[i].Name + " isOpen => " + outputDevice[i].IsOpen);
                //}
                
                InputDevice.UpdateInstalledDevices();

                //Console.WriteLine(InputDevice.InstalledDevices.Count);

                for (int i = 0; i < InputDevice.InstalledDevices.Count; i++)
                {
                    if (InputDevice.InstalledDevices[i].type() != Types.LAUNCHPAD_TYPE.UNKNOWN_DEVICE_TYPE) // Launchpad*
                    {
                    }
                }

                if (!muted)
                {
                        for (int i = 0; i < inputDevice.Count; i++)
                        {
                            if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.S)
                            {

                                double[] volume = new double[device.AudioMeterInformation.PeakValues.Count]; // so that we update all volume values at the same time

                                for (int z = 0; z < volume.Length; z++)
                                {
                                    volume[z] = device.AudioMeterInformation.PeakValues[z];
                                }

                                for (int z = 0; z < device.AudioMeterInformation.PeakValues.Count; z++) // this should just be LR?
                                {
                                    double volumePercentage = Math.Round(volume[z] * 100);
                                    
                                    if (device.AudioMeterInformation.PeakValues.Count == 2 && z == 0) { // do the left

                                        for (int q = 0; q < volumesLeft.Length - 1; q++)
                                        {
                                            volumesLeft[q] = volumesLeft[q + 1];
                                        }
                                        volumesLeft[volumesLeft.Length - 1] = volumePercentage;

                                        for (int q = 0; q < volumesLeft.Length; q++)
                                        {
                                            for (int n = 0; n < 8; n++)
                                            if (n < 8 * volumesLeft[q] / 100 && volumesLeft[q] != 0)
                                            {
                                                outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((q + 112) - (n * 16)), audio_colours[n]);
                                            }
                                            else
                                            {
                                                outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((q + 112) - (n * 16)), 0);
                                            }
                                        }
                                    
                                    } else if (device.AudioMeterInformation.PeakValues.Count == 2 && z == 1)
                                    { // do the right

                                        for (int q = volumesRight.Length - 1; q > 0; q--)
                                        {
                                            volumesRight[q] = volumesRight[q - 1];
                                        }
                                        volumesRight[0] = volumePercentage;

                                        for (int q = volumesRight.Length - 1; q >= 0; q--)
                                        {
                                            for (int n = 0; n < 8; n++)
                                                if (n < 8 * volumesRight[q] / 100 && volumesRight[q] != 0)
                                                {
                                                    outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((q + 116) - (n * 16)), audio_colours[n]);
                                                }
                                                else
                                                {
                                                    outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((q + 116) - (n * 16)), 0);
                                                }
                                        }

                                    }
                                    else
                                    {
                                    for (int n = 0; n < 8; n++)
                                        {
                                            if (n < 8 * volumePercentage / 100 && volumePercentage != 0)
                                            {
                                                outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((z + 115) - (n * 16)), audio_colours[n]);
                                            }
                                            else
                                            {
                                                outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((z + 115) - (n * 16)), 0);
                                            }

                                        }
                                    }


                                    

                                    
                                }
                            }
                        }
                }
                //Thread.Sleep(50);
            }

            for (int i = 0; i < inputDevice.Count; i++)
            {
                if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.MK2)
                {
                    outputDevice[i].SendSysEx(new Byte[] { 0xF0, 0x00, 0x20, 0x29, 0x02, 0x18, 0x14, 0xF7 }); // clear scrolling for Mk2
                    outputDevice[i].SendSysEx(new Byte[] { 0xF0, 0x00, 0x20, 0x29, 0x02, 0x18, 0x0E, 0x15, 0xF7 }); // set all LEDs Mk2
                } else if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.S)
                {
                    outputDevice[i].SendControlChange(Channel.Channel1, 0, 127); // set all LEDs S
                    outputDevice[i].SendSysEx(new Byte[] { 0xF0, 0x00, 0x20, 0x29, 0x09, 0x00, 0xF7 }); // clear scrolling for S, causes buffering issue, presumably it primes an empty scroll
                }
                outputDevice[i].Close();
                inputDevice[i].StopReceiving();
                inputDevice[i].Close();
            }
            return;
        }

        public static void NoteOn(NoteOnMessage msg)
        {
            Console.Write("[" + msg.Device.Name + "]: ON -> " + (int)msg.Pitch + " -> " + msg.Velocity);
            Console.WriteLine(" == SET TO ON <" + on[(int)msg.Pitch] + ">");

            if (((int)msg.Pitch == 88 || (int)msg.Pitch == 39) && msg.Velocity == 127)
            {
                //InputSimulator.SimulateKeyPress(VirtualKeyCode.VOLUME_MUTE);
                NAudio.CoreAudioApi.MMDeviceEnumerator MMDE = new NAudio.CoreAudioApi.MMDeviceEnumerator();
                NAudio.CoreAudioApi.MMDevice device = MMDE.GetDefaultAudioEndpoint(NAudio.CoreAudioApi.DataFlow.Render, NAudio.CoreAudioApi.Role.Console);
                 if (device.AudioEndpointVolume.Mute == true)
                {
                    device.AudioEndpointVolume.Mute = false;
                }
                else
                {
                    device.AudioEndpointVolume.Mute = true;
                }
            }

        }
        public static void NoteOff(NoteOffMessage msg)
        {
            Console.Write("[" + msg.Device.Name + "]: OFF -> " + (int)msg.Pitch + " -> " + msg.Velocity);
            Console.WriteLine(" == SET TO OFF");
        }
        public static void SysEx(SysExMessage msg)
        {
            StringBuilder hex = new StringBuilder(msg.Data.Length * 2);
            foreach (byte b in msg.Data)
            {
                hex.AppendFormat("{0:x2} ", b);
            }
            if ("f0 00 20 29 02 18 15 f7 " == hex.ToString())
            {
                Console.WriteLine("[" + msg.Device.Name + "]: device text has finished/completed loop.");
            } else {
                Console.WriteLine("[" + msg.Device.Name + "]: SysEx Message: \n" + hex.ToString());
            }
        }
        public static void ControlChange(ControlChangeMessage msg)
        {
            switch ((int)msg.Control)
            {
                case 0:
                    if (msg.Value == 3)
                    {
                        Console.WriteLine("[" + msg.Device.Name + "]: device text has finished/completed loop.");
                    }
                    break;
                case 111:
                    if (msg.Value == 0)
                    {
                        for (int i = 0; i < outputDevice.Count; i++)
                        {
                            outputDevice[i].SendControlChange(Channel.Channel1, msg.Control, 15);
                        }
                        Console.WriteLine("PROGRAM EXITING.");
                        exit = true;
                    }
                    break;
                default:
                    Console.WriteLine("[" + msg.Device.Name + "]: Control: " + msg.Control + ", Value: " + msg.Value);
                    if ((int)msg.Value == 127)
                    {
                        for (int i = 0; i < outputDevice.Count; i++)
                        {
                            outputDevice[i].SendControlChange(Channel.Channel1, msg.Control, 15);
                        }
                    }
                    else
                    {
                        for (int i = 0; i < outputDevice.Count; i++)
                        {
                            outputDevice[i].SendControlChange(Channel.Channel1, msg.Control, 0);
                        }
                    }
                    break;
            }
        }
        public static Byte[] textMk2(string text, int colour, bool loop = true) {
            var b = new byte[text.Length + 10];
            b[0] = 0xF0;
            b[1] = 0x00;
            b[2] = 0x20;
            b[3] = 0x29;
            b[4] = 0x02;
            b[5] = 0x18; // SysEx header -- 6
            b[6] = 0x14; // text packet -- 1
            b[7] = (byte)colour; // colour -- 1
            b[8] = (byte)(loop == true ? 1 : 0); // loop, 1 = yes -- 1
            // 10 PACKETS OF OVERHEAD, including ending packet
            char[] a = text.ToCharArray();
            for (int i = 0; i < a.Length; i++) // handle timing changes, done by using \x000{1-7} inline
            {
                b[i + 9] = Convert.ToByte(a[i]);
            }
            b[b.Length - 1] = 0xF7;
            return b;
        }
        public static Byte[] textS(string text, int colour, bool loop = true)
        {
            var b = new byte[text.Length + 7];
            b[0] = 0xF0;
            b[1] = 0x00;
            b[2] = 0x20;
            b[3] = 0x29;
            b[4] = 0x09; // SysEx header -- 5
            b[5] = (byte)(colour + (loop == true ? 64 : 0)); // colour -- 1
            // 10 PACKETS OF OVERHEAD, including ending packet
            char[] a = text.ToCharArray();
            for (int i = 0; i < a.Length; i++) // handle timing changes, done by using \x000{1-7} inline
            {
                b[i + 6] = Convert.ToByte(a[i]);
            }
            b[b.Length - 1] = 0xF7;
            return b;
        }

        static void AudioEndpointVolume_OnVolumeNotification(NAudio.CoreAudioApi.AudioVolumeNotificationData data)
        {
            muted = data.Muted;
            if (data.Muted == true)
            {
                for (int i = 0; i < inputDevice.Count; i++)
                {
                    if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.MK2)
                    {
                        outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)39, 72);
                    }
                    else if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.S)
                    {
                        outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)88, 15);
                        for (int z = 0; z < 8; z++)
                        {
                            for (int n = 0; n < 8; n++)
                            {
                                outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)((z + 112) - (n * 16)), 0);
                            }
                        }
                    }
                }
            }
            else
            {
                for (int i = 0; i < inputDevice.Count; i++)
                {
                    if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.MK2)
                    {
                        outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)39, 0);
                    }
                    else if (outputDevice[i].type() == Types.LAUNCHPAD_TYPE.S)
                    {
                        outputDevice[i].SendNoteOn(Channel.Channel1, (Pitch)88, 0);
                    }
                }
            }
        }
    }
}